{
  "_args": [
    [
      {
        "raw": "cordova-plugin-advanced-http",
        "scope": null,
        "escapedName": "cordova-plugin-advanced-http",
        "name": "cordova-plugin-advanced-http",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Apps\\Apps\\RinstructorDev"
    ]
  ],
  "_from": "cordova-plugin-advanced-http",
  "_hasShrinkwrap": false,
  "_id": "cordova-plugin-advanced-http@2.3.1",
  "_location": "/cordova-plugin-advanced-http",
  "_nodeVersion": "10.17.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cordova-plugin-advanced-http_2.3.1_1576294593714_0.7936419435147362"
  },
  "_npmUser": {
    "name": "silkimen",
    "email": "sefa@ilkimen.de"
  },
  "_npmVersion": "6.13.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cordova-plugin-advanced-http",
    "scope": null,
    "escapedName": "cordova-plugin-advanced-http",
    "name": "cordova-plugin-advanced-http",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cordova-plugin-advanced-http/-/cordova-plugin-advanced-http-2.3.1.tgz",
  "_shasum": "8d55753ed2adf5a7bf9224d407844a63b99dd448",
  "_shrinkwrap": null,
  "_spec": "cordova-plugin-advanced-http",
  "_where": "D:\\Apps\\Apps\\RinstructorDev",
  "author": {
    "name": "Wymsee"
  },
  "bugs": {
    "url": "https://github.com/silkimen/cordova-plugin-advanced-http/issues"
  },
  "contributors": [
    {
      "name": "devgeeks"
    },
    {
      "name": "EddyVerbruggen"
    },
    {
      "name": "mbektchiev"
    },
    {
      "name": "denisbabineau"
    },
    {
      "name": "andrey-tsaplin"
    },
    {
      "name": "pvsaikrishna"
    },
    {
      "name": "cvillerm"
    },
    {
      "name": "hideov"
    },
    {
      "name": "Mobisys"
    }
  ],
  "cordova": {
    "id": "cordova-plugin-advanced-http",
    "platforms": [
      "ios",
      "android"
    ]
  },
  "dependencies": {},
  "description": "Cordova / Phonegap plugin for communicating with HTTP servers using SSL pinning",
  "devDependencies": {
    "chai": "4.1.2",
    "chai-as-promised": "7.1.1",
    "colors": "1.1.2",
    "cordova": "8.1.2",
    "mocha": "4.0.0",
    "mock-require": "2.0.2",
    "mz": "2.7.0",
    "umd-tough-cookie": "2.4.3",
    "wd": "1.4.1",
    "xml2js": "0.4.19"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8GbxrzBN7RTCwdBsVW0g+O7NmKX3M6zALessmm/66qOA/jO+pSd1BQg+abbAMBArRnI0ITOIjEsChjwIjFS06w==",
    "shasum": "8d55753ed2adf5a7bf9224d407844a63b99dd448",
    "tarball": "https://registry.npmjs.org/cordova-plugin-advanced-http/-/cordova-plugin-advanced-http-2.3.1.tgz",
    "fileCount": 68,
    "unpackedSize": 818748,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd9FjCCRA9TVsSAnZWagAAjQkP/39J+DNFP9bGwE6bwjQg\nTf7z409fK1XA9RRmYk/ZWhIC1dpIxBreF7Dc9Oy2HhS+4iA11l1mp9GwPM4U\n2CRSR4huT5rqgplxPaS9QOEUJ7Sy1ODqUHgSAcI5WAQuYWzJmIC9VC+4Yrzs\nsgbSskhC1Kw07yOU/8Z7oWRQqdCk2jQVkHnjFouqvpmHG4uyVN5W8CM5SizI\nVWibkzBXsCXep0E6T9Gb5b4wIOxEHx7hVqXbN+TewJzfWr4KucdUYlwP6jEG\nyKM1GT0m5bf/ub2RLr4E2j5RTSZqHay7/fShapbkQeZgnSPlhzFziHjLyT8g\nnB9KTevyM+G+RpdiCqCL0G8qTRUVgGao4hhllPHuQyYdqw5E7be6AtDQsmFz\nLLoYn/w6KdqpCtXUFARAilI+1pMaQDySb3Fog8SolRc624JO3vluFwo1HPFE\nSrAzhtw8+0NCP9JoJDYQPuBlwV9VNyd11Yw7OF9F4w97OSczj8OWIeiFcUBu\nFhuJ6l8nqhCk9OV7nHka8F1zMuaRWUFpQalMGj0PbwXmdfUfkPq2qPSZHMKD\nuiWto745b3XG4Wnp7ICEde9GoRnuUnQqeIKEfNdjPjvMhqlN4G2X9kprgQzD\nG6jZx6pVcupfn5JaytK11A8hVuuz8sHp0ad+6TsA6avSgyV3Pl5vO/QfQEAd\nZX6Q\r\n=1dlO\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": [
    {
      "name": "cordova",
      "version": ">=4.0.0"
    }
  ],
  "gitHead": "a4f121728cc98dcf46cf7aa38c262957a03bcf14",
  "homepage": "https://github.com/silkimen/cordova-plugin-advanced-http#readme",
  "keywords": [
    "cordova",
    "device",
    "ecosystem:cordova",
    "cordova-ios",
    "cordova-android",
    "ssl",
    "tls"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "jkfb",
      "email": "jbgh@posteo.mx"
    },
    {
      "name": "silkimen",
      "email": "sefa@ilkimen.net"
    }
  ],
  "name": "cordova-plugin-advanced-http",
  "optionalDependencies": {},
  "readme": "Cordova Advanced HTTP\n=====================\n[![npm version](https://img.shields.io/npm/v/cordova-plugin-advanced-http)](https://www.npmjs.com/package/cordova-plugin-advanced-http?activeTab=versions)\n[![MIT Licence](https://img.shields.io/badge/license-MIT-blue?style=flat)](https://opensource.org/licenses/mit-license.php)\n[![downloads/month](https://img.shields.io/npm/dm/cordova-plugin-advanced-http.svg)](https://www.npmjs.com/package/cordova-plugin-advanced-http)\n\n[![Travis Build Status](https://img.shields.io/travis/silkimen/cordova-plugin-advanced-http/master?label=Travis%20CI)](https://travis-ci.org/silkimen/cordova-plugin-advanced-http)\n[![GitHub Build Status](https://img.shields.io/github/workflow/status/silkimen/cordova-plugin-advanced-http/Cordova%20HTTP%20Plugin%20CI/master?label=GitHub%20Actions)](https://github.com/silkimen/cordova-plugin-advanced-http/actions)\n\n\nCordova / Phonegap plugin for communicating with HTTP servers.  Supports iOS, Android and [Browser](#browserSupport).\n\nThis is a fork of [Wymsee's Cordova-HTTP plugin](https://github.com/wymsee/cordova-HTTP).\n\n## Advantages over Javascript requests\n\n - SSL / TLS Pinning\n - CORS restrictions do not apply\n - Handling of HTTP code 401 - read more at [Issue CB-2415](https://issues.apache.org/jira/browse/CB-2415)\n\n## Updates\n\nPlease check [CHANGELOG.md](CHANGELOG.md) for details about updating to a new version.\n\n## Installation\n\nThe plugin conforms to the Cordova plugin specification, it can be installed\nusing the Cordova / Phonegap command line interface.\n\n```shell\nphonegap plugin add cordova-plugin-advanced-http\n\ncordova plugin add cordova-plugin-advanced-http\n```\n\n## Usage\n\n### Plain Cordova\n\nThis plugin registers a global object located at `cordova.plugin.http`.\n\n### With Ionic-native wrapper\n\nCheck the [Ionic docs](https://ionicframework.com/docs/native/http/) for how to use this plugin with Ionic-native.\n\n## Synchronous Functions\n\n### getBasicAuthHeader\nThis returns an object representing a basic HTTP Authorization header of the form `{'Authorization': 'Basic base64encodedusernameandpassword'}`\n\n```js\nvar header = cordova.plugin.http.getBasicAuthHeader('user', 'password');\n```\n\n### useBasicAuth\nThis sets up all future requests to use Basic HTTP authentication with the given username and password.\n\n```js\ncordova.plugin.http.useBasicAuth('user', 'password');\n```\n\n### setHeader<a name=\"setHeader\"></a>\nSet a header for all future requests to a specified host. Takes a hostname, a header and a value (must be a string value).\n\n```js\ncordova.plugin.http.setHeader('Hostname', 'Header', 'Value');\n```\n\nYou can also define headers used for all hosts by using wildcard character \"\\*\" or providing only two params.\n\n```js\ncordova.plugin.http.setHeader('*', 'Header', 'Value');\ncordova.plugin.http.setHeader('Header', 'Value');\n```\n\nThe hostname also includes the port number. If you define a header for `www.example.com` it will not match following URL `http://www.example.com:8080`.\n\n```js\n// will match http://www.example.com/...\ncordova.plugin.http.setHeader('www.example.com', 'Header', 'Value');\n\n// will match http://www.example.com:8080/...\ncordova.plugin.http.setHeader('www.example.com:8080', 'Header', 'Value');\n```\n\n### setDataSerializer<a name=\"setDataSerializer\"></a>\nSet the data serializer which will be used for all future PATCH, POST and PUT requests. Takes a string representing the name of the serializer.\n\n```js\ncordova.plugin.http.setDataSerializer('urlencoded');\n```\n\nYou can choose one of these:\n* `urlencoded`: send data as url encoded content in body (content type \"application/x-www-form-urlencoded\")\n* `json`: send data as JSON encoded content in body (content type \"application/json\")\n* `utf8`: send data as plain UTF8 encoded string in body (content type \"plain/text\")\n* `multipart`: send FormData objects as multipart content in body (content type \"multipart/form-data\")\n\nThis defaults to `urlencoded`. You can also override the default content type headers by specifying your own headers (see [setHeader](#setHeader)).\n\n:warning: `urlencoded` does not support serializing deep structures whereas `json` does.\n\n:warning: `multipart` depends on several Web API standards which need to be supported in your web view. Check out https://github.com/silkimen/cordova-plugin-advanced-http/wiki/Web-APIs-required-for-Multipart-requests for more info.\n\n### setRequestTimeout\nSet how long to wait for a request to respond, in seconds.\n\n```js\ncordova.plugin.http.setRequestTimeout(5.0);\n```\n\n### setFollowRedirect<a name=\"setFollowRedirect\"></a>\nConfigure if it should follow redirects automatically. This defaults to true.\n\n```js\ncordova.plugin.http.setFollowRedirect(true);\n```\n\n### getCookieString\nReturns saved cookies (as string) matching given URL.\n\n```js\ncordova.plugin.http.getCookieString(url);\n```\n\n### setCookie\nAdd a custom cookie. Takes a URL, a cookie string and an options object. See [ToughCookie documentation](https://github.com/salesforce/tough-cookie#setcookiecookieorstring-currenturl-options-cberrcookie) for allowed options.\n\n```js\ncordova.plugin.http.setCookie(url, cookie, options);\n```\n\n### clearCookies\nClear the cookie store.\n\n```js\ncordova.plugin.http.clearCookies();\n```\n\n## Asynchronous Functions\nThese functions all take success and error callbacks as their last 2 arguments.\n\n### setServerTrustMode<a name=\"setServerTrustMode\"></a>\nSet server trust mode, being one of the following values:\n\n* `default`: default SSL trustship and hostname verification handling using system's CA certs\n* `legacy`: use legacy default behavior (< 2.0.3), excluding user installed CA certs (only for Android)\n* `nocheck`: disable SSL certificate checking and hostname verification, trusting all certs (meant to be used only for testing purposes)\n* `pinned`: trust only provided certificates\n\nTo use SSL pinning you must include at least one `.cer` SSL certificate in your app project.  You can pin to your server certificate or to one of the issuing CA certificates. Include your certificate in the `www/certificates` folder. All `.cer` files found there will be loaded automatically.\n\n:warning: Your certificate must be DER encoded! If you only have a PEM encoded certificate read this [stackoverflow answer](http://stackoverflow.com/a/16583429/3182729). You want to convert it to a DER encoded certificate with a .cer extension.\n\n```js\n// enable SSL pinning\ncordova.plugin.http.setServerTrustMode('pinned', function() {\n  console.log('success!');\n}, function() {\n  console.log('error :(');\n});\n\n// use system's default CA certs\ncordova.plugin.http.setServerTrustMode('default', function() {\n  console.log('success!');\n}, function() {\n  console.log('error :(');\n});\n\n// disable SSL cert checking, only meant for testing purposes, do NOT use in production!\ncordova.plugin.http.setServerTrustMode('nocheck', function() {\n  console.log('success!');\n}, function() {\n  console.log('error :(');\n});\n```\n\n### disableRedirect (deprecated)\nThis function was deprecated in 2.0.9. Use [\"setFollowRedirect\"](#setFollowRedirect) instead.\n\n### setSSLCertMode (deprecated)\nThis function was deprecated in 2.0.8. Use [\"setServerTrustMode\"](#setServerTrustMode) instead.\n\n### removeCookies\nRemove all cookies associated with a given URL.\n\n```js\ncordova.plugin.http.removeCookies(url, callback);\n```\n\n### sendRequest<a name=\"sendRequest\"></a>\nExecute a HTTP request.  Takes a URL and an options object. This is the internally used implementation of the following shorthand functions ([post](#post), [get](#get), [put](#put), [patch](#patch), [delete](#delete), [head](#head), [uploadFile](#uploadFile) and [downloadFile](#downloadFile)). You can use this function, if you want to override global settings for each single request. Check the documentation of the respective shorthand function for details on what is returned on success and failure.\n\n:warning: You need to encode the base URL yourself if it contains special characters like whitespaces. You can use `encodeURI()` for this purpose.\n\nThe options object contains following keys:\n\n* `method`: HTTP method to be used, defaults to `get`, needs to be one of the following values:\n  * `get`, `post`, `put`, `patch`, `head`, `delete`, `upload`, `download`\n* `data`: payload to be send to the server (only applicable on `post`, `put` or `patch` methods)\n* `params`: query params to be appended to the URL (only applicable on `get`, `head`, `delete`, `upload` or `download` methods)\n* `serializer`: data serializer to be used (only applicable on `post`, `put` or `patch` methods), defaults to global serializer value, see [setDataSerializer](#setDataSerializer) for supported values\n* `responseType`: expected response type, defaults to `text`, needs to be one of the following values:\n  * `text`: data is returned as decoded string, use this for all kinds of string responses (e.g. XML, HTML, plain text, etc.)\n  * `json` data is treated as JSON and returned as parsed object\n  * `arraybuffer`: data is returned as [ArrayBuffer instance](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)\n  * `blob`: data is returned as [Blob instance](https://developer.mozilla.org/en-US/docs/Web/API/Blob)\n* `timeout`: timeout value for the request in seconds, defaults to global timeout value\n* `followRedirect`: enable or disable automatically following redirects\n* `headers`: headers object (key value pair), will be merged with global values\n* `filePath`: file path(s) to be used during upload and download see [uploadFile](#uploadFile) and [downloadFile](#downloadFile) for detailed information\n* `name`: name(s) to be used during upload see [uploadFile](#uploadFile) for detailed information\n\nHere's a quick example:\n\n```js\nconst options = {\n  method: 'post',\n  data: { id: 12, message: 'test' },\n  headers: { Authorization: 'OAuth2: token' }\n};\n\ncordova.plugin.http.sendRequest('https://google.com/', options, function(response) {\n  // prints 200\n  console.log(response.status);\n}, function(response) {\n  // prints 403\n  console.log(response.status);\n\n  //prints Permission denied\n  console.log(response.error);\n});\n```\n\n### post<a name=\"post\"></a>\nExecute a POST request.  Takes a URL, data, and headers.\n\n```js\ncordova.plugin.http.post('https://google.com/', {\n  test: 'testString'\n}, {\n  Authorization: 'OAuth2: token'\n}, function(response) {\n  console.log(response.status);\n}, function(response) {\n  console.error(response.error);\n});\n```\n\n#### success\nThe success function receives a response object with 4 properties: status, data, url, and headers.  **status** is the HTTP response code as numeric value. **data** is the response from the server as a string. **url** is the final URL obtained after any redirects as a string. **headers** is an object with the headers. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.\n\nHere's a quick example:\n\n```js\n{\n  status: 200,\n  data: '{\"id\": 12, \"message\": \"test\"}',\n  url: 'http://example.net/rest'\n  headers: {\n    'content-length': '247'\n  }\n}\n```\n\nMost apis will return JSON meaning you'll want to parse the data like in the example below:\n\n```js\ncordova.plugin.http.post('https://google.com/', {\n  id: 12,\n  message: 'test'\n}, { Authorization: 'OAuth2: token' }, function(response) {\n  // prints 200\n  console.log(response.status);\n  try {\n    response.data = JSON.parse(response.data);\n    // prints test\n    console.log(response.data.message);\n  } catch(e) {\n    console.error('JSON parsing error');\n  }\n}, function(response) {\n  // prints 403\n  console.log(response.status);\n\n  //prints Permission denied\n  console.log(response.error);\n});\n```\n\n#### failure\nThe error function receives a response object with 4 properties: status, error, url, and headers (url and headers being optional).  **status** is a HTTP response code or an internal error code. Positive values are HTTP status codes whereas negative values do represent internal error codes. **error** is the error response from the server as a string or an internal error message. **url** is the final URL obtained after any redirects as a string. **headers** is an object with the headers. The keys of the returned object are the header names and the values are the respective header values. All header names are lowercase.\n\nHere's a quick example:\n\n```js\n{\n  status: 403,\n  error: 'Permission denied',\n  url: 'http://example.net/noperm'\n  headers: {\n    'content-length': '247'\n  }\n}\n```\n\n:warning: An enumeration style object is exposed as `cordova.plugin.http.ErrorCode`. You can use it to check against internal error codes.\n\n### get<a name=\"get\"></a>\nExecute a GET request.  Takes a URL, parameters, and headers.  See the [post](#post) documentation for details on what is returned on success and failure.\n\n```js\ncordova.plugin.http.get('https://google.com/', {\n  id: '12',\n  message: 'test'\n}, { Authorization: 'OAuth2: token' }, function(response) {\n  console.log(response.status);\n}, function(response) {\n  console.error(response.error);\n});\n```\n\n### put<a name=\"put\"></a>\nExecute a PUT request.  Takes a URL, data, and headers.  See the [post](#post) documentation for details on what is returned on success and failure.\n\n### patch<a name=\"patch\"></a>\nExecute a PATCH request.  Takes a URL, data, and headers.  See the [post](#post) documentation for details on what is returned on success and failure.\n\n### delete<a name=\"delete\"></a>\nExecute a DELETE request.  Takes a URL, parameters, and headers.  See the [post](#post) documentation for details on what is returned on success and failure.\n\n### head<a name=\"head\"></a>\nExecute a HEAD request.  Takes a URL, parameters, and headers.  See the [post](#post) documentation for details on what is returned on success and failure.\n\n### uploadFile<a name=\"uploadFile\"></a>\nUploads one or more file(s) saved on the device.  Takes a URL, parameters, headers, filePath(s), and the name(s) of the parameter to pass the file along as.  See the [post](#post) documentation for details on what is returned on success and failure.\n\n```js\n// e.g. for single file\nconst filePath = 'file:///somepicture.jpg';\nconst name = 'picture';\n\n// e.g. for multiple files\nconst filePath = ['file:///somepicture.jpg', 'file:///somedocument.doc'];\nconst name = ['picture', 'document'];\n\ncordova.plugin.http.uploadFile(\"https://google.com/\", {\n    id: '12',\n    message: 'test'\n}, { Authorization: 'OAuth2: token' }, filePath, name, function(response) {\n    console.log(response.status);\n}, function(response) {\n    console.error(response.error);\n});\n```\n\n### downloadFile<a name=\"downloadFile\"></a>\nDownloads a file and saves it to the device.  Takes a URL, parameters, headers, and a filePath.  See [post](#post) documentation for details on what is returned on failure.  On success this function returns a cordova [FileEntry object](http://cordova.apache.org/docs/en/3.3.0/cordova_file_file.md.html#FileEntry).\n\n```js\ncordova.plugin.http.downloadFile(\"https://google.com/\", {\n  id: '12',\n  message: 'test'\n}, { Authorization: 'OAuth2: token' }, 'file:///somepicture.jpg', function(entry) {\n  // prints the filename\n  console.log(entry.name);\n\n  // prints the filePath\n  console.log(entry.fullPath);\n}, function(response) {\n  console.error(response.error);\n});\n```\n\n## Browser support<a name=\"browserSupport\"></a>\n\nThis plugin supports a very restricted set of functions on the browser platform.\nIt's meant for testing purposes, not for production grade usage.\n\nFollowing features are *not* supported:\n\n* Manipulating Cookies\n* Uploading and Downloading files\n* Pinning SSL certificate\n* Disabling SSL certificate check\n* Disabling transparently following redirects (HTTP codes 3xx)\n* Circumventing CORS restrictions\n\n## Libraries\n\nThis plugin utilizes some awesome open source libraries:\n\n - iOS - [AFNetworking](https://github.com/AFNetworking/AFNetworking) (MIT licensed)\n - Android - [http-request](https://github.com/kevinsawicki/http-request) (MIT licensed)\n - Cookie handling - [tough-cookie](https://github.com/salesforce/tough-cookie) (BSD-3-Clause licensed)\n\nWe made a few modifications to the networking libraries.\n\n## CI Builds & E2E Testing\n\nThis plugin uses amazing cloud services to maintain quality. CI Builds and E2E testing are powered by:\n\n* [GitHub Actions](https://github.com/features/actions)\n* [Travis CI](https://travis-ci.org/)\n* [BrowserStack](https://www.browserstack.com/)\n* [Sauce Labs](https://saucelabs.com/)\n* [httpbin.org](https://httpbin.org/)\n\n## Contribute & Develop\n\nWe've set up a separate document for our [contribution guidelines](CONTRIBUTING.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/silkimen/cordova-plugin-advanced-http.git"
  },
  "scripts": {
    "buildandroid": "./scripts/build-test-app.sh --android --emulator",
    "buildbrowser": "./scripts/build-test-app.sh --browser",
    "buildios": "./scripts/build-test-app.sh --ios --emulator",
    "release": "npm run test && ./scripts/release.sh",
    "test": "npm run testjs && npm run testapp",
    "testandroid": "npm run updatecert && npm run buildandroid && ./scripts/test-app.sh --android --emulator",
    "testapp": "npm run testandroid && npm run testios",
    "testios": "npm run updatecert && npm run buildios && ./scripts/test-app.sh --ios --emulator",
    "testjs": "mocha ./test/js-specs.js",
    "updatecert": "node ./scripts/update-e2e-server-cert.js && node ./scripts/update-e2e-client-cert.js"
  },
  "version": "2.3.1"
}
